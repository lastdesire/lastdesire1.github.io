{"ast":null,"code":"import * as React from 'react';\nimport createElement from 'react-native-web/dist/exports/createElement';\nimport ExponentAV from './ExponentAV';\nimport { addFullscreenListener } from './FullscreenUtils.web';\nimport { VideoFullscreenUpdate } from './Video.types';\nconst Video = React.forwardRef((props, ref) => createElement('video', {\n  ...props,\n  ref\n}));\nexport default class ExponentVideo extends React.Component {\n  _video;\n  _removeFullscreenListener;\n  componentWillUnmount() {\n    this._removeFullscreenListener?.();\n  }\n  onFullscreenChange = isFullscreen => {\n    if (!this.props.onFullscreenUpdate) return;\n    if (isFullscreen) {\n      this.props.onFullscreenUpdate({\n        nativeEvent: {\n          fullscreenUpdate: VideoFullscreenUpdate.PLAYER_DID_PRESENT\n        }\n      });\n    } else {\n      this.props.onFullscreenUpdate({\n        nativeEvent: {\n          fullscreenUpdate: VideoFullscreenUpdate.PLAYER_DID_DISMISS\n        }\n      });\n    }\n  };\n  onStatusUpdate = async () => {\n    if (!this.props.onStatusUpdate) {\n      return;\n    }\n    const nativeEvent = await ExponentAV.getStatusForVideo(this._video);\n    this.props.onStatusUpdate({\n      nativeEvent\n    });\n  };\n  onLoadStart = () => {\n    if (!this.props.onLoadStart) {\n      return;\n    }\n    this.props.onLoadStart();\n    this.onStatusUpdate();\n  };\n  onLoadedData = event => {\n    if (!this.props.onLoad) {\n      return;\n    }\n    this.props.onLoad(event);\n    this.onStatusUpdate();\n  };\n  onError = event => {\n    if (!this.props.onError) {\n      return;\n    }\n    this.props.onError(event);\n    this.onStatusUpdate();\n  };\n  onProgress = () => {\n    this.onStatusUpdate();\n  };\n  onSeeking = () => {\n    this.onStatusUpdate();\n  };\n  onEnded = () => {\n    this.onStatusUpdate();\n  };\n  onLoadedMetadata = () => {\n    this.onStatusUpdate();\n  };\n  onCanPlay = event => {\n    if (!this.props.onReadyForDisplay) {\n      return;\n    }\n    this.props.onReadyForDisplay(event);\n    this.onStatusUpdate();\n  };\n  onStalled = () => {\n    this.onStatusUpdate();\n  };\n  onRef = ref => {\n    this._removeFullscreenListener?.();\n    if (ref) {\n      this._video = ref;\n      this._removeFullscreenListener = addFullscreenListener(this._video, this.onFullscreenChange);\n      this.onStatusUpdate();\n    } else {\n      this._removeFullscreenListener = undefined;\n    }\n  };\n  render() {\n    const {\n      source,\n      status = {},\n      resizeMode: objectFit,\n      useNativeControls,\n      style\n    } = this.props;\n    const customStyle = {\n      position: undefined,\n      objectFit,\n      overflow: 'hidden'\n    };\n    return React.createElement(Video, {\n      ref: this.onRef,\n      onLoadStart: this.onLoadStart,\n      onLoadedData: this.onLoadedData,\n      onError: this.onError,\n      onTimeUpdate: this.onProgress,\n      onSeeking: this.onSeeking,\n      onEnded: this.onEnded,\n      onLoadedMetadata: this.onLoadedMetadata,\n      onCanPlay: this.onCanPlay,\n      onStalled: this.onStalled,\n      src: source?.uri || undefined,\n      muted: status.isMuted,\n      loop: status.isLooping,\n      autoPlay: status.shouldPlay,\n      controls: useNativeControls,\n      style: [style, customStyle],\n      playsInline: true\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["React","createElement","ExponentAV","addFullscreenListener","VideoFullscreenUpdate","Video","forwardRef","props","ref","ExponentVideo","Component","_video","_removeFullscreenListener","componentWillUnmount","onFullscreenChange","isFullscreen","onFullscreenUpdate","nativeEvent","fullscreenUpdate","PLAYER_DID_PRESENT","PLAYER_DID_DISMISS","onStatusUpdate","getStatusForVideo","onLoadStart","onLoadedData","event","onLoad","onError","onProgress","onSeeking","onEnded","onLoadedMetadata","onCanPlay","onReadyForDisplay","onStalled","onRef","undefined","render","source","status","resizeMode","objectFit","useNativeControls","style","customStyle","position","overflow","onTimeUpdate","src","uri","muted","isMuted","loop","isLooping","autoPlay","shouldPlay","controls","playsInline"],"sources":["/Users/noname/WebstormProjects/webapplastdesire/node_modules/expo-av/src/ExponentVideo.web.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ViewProps } from 'react-native';\nimport createElement from 'react-native-web/dist/exports/createElement';\n\nimport { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV';\nimport ExponentAV from './ExponentAV';\nimport { addFullscreenListener } from './FullscreenUtils.web';\nimport {\n  VideoFullscreenUpdate,\n  VideoFullscreenUpdateEvent,\n  VideoReadyForDisplayEvent,\n} from './Video.types';\n\ntype ExponentVideoProps = {\n  source: AVPlaybackNativeSource | null;\n  resizeMode?: object;\n  status?: AVPlaybackStatusToSet;\n  useNativeControls?: boolean;\n  onStatusUpdate?: (event: { nativeEvent: AVPlaybackStatus }) => void;\n  onReadyForDisplay?: (event: { nativeEvent: VideoReadyForDisplayEvent }) => void;\n  onFullscreenUpdate?: (event: { nativeEvent: VideoFullscreenUpdateEvent }) => void;\n  onLoadStart: () => void;\n  onLoad: (event: { nativeEvent: AVPlaybackStatus }) => void;\n  onError: (event: { nativeEvent: { error: string } }) => void;\n  // Required by react-native\n  scaleX?: number;\n  scaleY?: number;\n  translateX?: number;\n  translateY?: number;\n  rotation?: number;\n} & ViewProps;\n\nexport type NaturalSize = {\n  width: number;\n  height: number;\n  orientation: 'portrait' | 'landscape';\n};\n\nconst Video: any = React.forwardRef<HTMLVideoElement, ExponentVideoProps>((props, ref) =>\n  createElement('video', { ...props, ref })\n);\n\nexport default class ExponentVideo extends React.Component<ExponentVideoProps> {\n  _video?: HTMLVideoElement;\n  _removeFullscreenListener?: () => any;\n\n  componentWillUnmount() {\n    this._removeFullscreenListener?.();\n  }\n\n  onFullscreenChange = (isFullscreen: boolean) => {\n    if (!this.props.onFullscreenUpdate) return;\n    if (isFullscreen) {\n      this.props.onFullscreenUpdate({\n        nativeEvent: { fullscreenUpdate: VideoFullscreenUpdate.PLAYER_DID_PRESENT },\n      });\n    } else {\n      this.props.onFullscreenUpdate({\n        nativeEvent: { fullscreenUpdate: VideoFullscreenUpdate.PLAYER_DID_DISMISS },\n      });\n    }\n  };\n\n  onStatusUpdate = async () => {\n    if (!this.props.onStatusUpdate) {\n      return;\n    }\n    const nativeEvent = await ExponentAV.getStatusForVideo(this._video);\n    this.props.onStatusUpdate({ nativeEvent });\n  };\n\n  onLoadStart = () => {\n    if (!this.props.onLoadStart) {\n      return;\n    }\n    this.props.onLoadStart();\n    this.onStatusUpdate();\n  };\n\n  onLoadedData = (event) => {\n    if (!this.props.onLoad) {\n      return;\n    }\n    this.props.onLoad(event);\n    this.onStatusUpdate();\n  };\n\n  onError = (event) => {\n    if (!this.props.onError) {\n      return;\n    }\n    this.props.onError(event);\n    this.onStatusUpdate();\n  };\n\n  onProgress = () => {\n    this.onStatusUpdate();\n  };\n\n  onSeeking = () => {\n    this.onStatusUpdate();\n  };\n\n  onEnded = () => {\n    this.onStatusUpdate();\n  };\n\n  onLoadedMetadata = () => {\n    this.onStatusUpdate();\n  };\n\n  onCanPlay = (event) => {\n    if (!this.props.onReadyForDisplay) {\n      return;\n    }\n    this.props.onReadyForDisplay(event);\n    this.onStatusUpdate();\n  };\n\n  onStalled = () => {\n    this.onStatusUpdate();\n  };\n\n  onRef = (ref: HTMLVideoElement | null) => {\n    this._removeFullscreenListener?.();\n    if (ref) {\n      this._video = ref;\n      this._removeFullscreenListener = addFullscreenListener(this._video, this.onFullscreenChange);\n      this.onStatusUpdate();\n    } else {\n      this._removeFullscreenListener = undefined;\n    }\n  };\n\n  render() {\n    const { source, status = {}, resizeMode: objectFit, useNativeControls, style } = this.props;\n\n    const customStyle = {\n      position: undefined,\n      objectFit,\n      overflow: 'hidden',\n    };\n    return (\n      <Video\n        ref={this.onRef}\n        onLoadStart={this.onLoadStart}\n        onLoadedData={this.onLoadedData}\n        onError={this.onError}\n        onTimeUpdate={this.onProgress}\n        onSeeking={this.onSeeking}\n        onEnded={this.onEnded}\n        onLoadedMetadata={this.onLoadedMetadata}\n        onCanPlay={this.onCanPlay}\n        onStalled={this.onStalled}\n        src={source?.uri || undefined}\n        muted={status.isMuted}\n        loop={status.isLooping}\n        autoPlay={status.shouldPlay}\n        controls={useNativeControls}\n        style={[style, customStyle]}\n        playsInline\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}