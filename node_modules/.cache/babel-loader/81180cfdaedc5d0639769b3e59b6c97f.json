{"ast":null,"code":"import { Platform } from 'expo-modules-core';\nimport { getAssetByID } from './AssetRegistry';\nimport { selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n// @needsAudit\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  /**\n   * @private\n   */\n  static byHash = {};\n  /**\n   * @private\n   */\n  static byUri = {};\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  name;\n  /**\n   * The extension of the asset filename.\n   */\n  type;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  hash = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer.\n   */\n  uri;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  localUri = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  width = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  height = null;\n  // @docsMissing\n  downloading = false;\n  // @docsMissing\n  downloaded = false;\n  /**\n   * @private\n   */\n  _downloadCallbacks = [];\n  constructor(_ref) {\n    let {\n      name,\n      type,\n      hash = null,\n      uri,\n      width,\n      height\n    } = _ref;\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId) {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(virtualAssetModule) {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const {\n        uri\n      } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height\n      });\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n    return Asset.fromMetadata(meta);\n  }\n  // @docsMissing\n  static fromMetadata(meta) {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n    const {\n      uri,\n      hash\n    } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n  // @docsMissing\n  static fromURI(uri) {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri\n    });\n    Asset.byUri[uri] = asset;\n    return asset;\n  }\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#assetlocaluri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync() {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({\n          resolve,\n          reject\n        });\n      });\n      return this;\n    }\n    this.downloading = true;\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const {\n            width,\n            height,\n            name\n          } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(_ref2 => {\n        let {\n          resolve\n        } = _ref2;\n        return resolve();\n      });\n    } catch (e) {\n      this._downloadCallbacks.forEach(_ref3 => {\n        let {\n          reject\n        } = _ref3;\n        return reject(e);\n      });\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["Platform","getAssetByID","selectAssetSource","AssetUris","ImageAssets","getLocalAssetUri","downloadAsync","IS_ENV_WITH_UPDATES_ENABLED","resolveAssetSource","Asset","byHash","byUri","name","type","hash","uri","localUri","width","height","downloading","downloaded","_downloadCallbacks","constructor","OS","getFilename","getFileExtension","loadAsync","moduleId","moduleIds","Array","isArray","Promise","all","map","fromModule","virtualAssetModule","fromURI","meta","Error","asset","includes","fromMetadata","metaHash","indexOf","split","extension","startsWith","substring","resolve","reject","push","isImageType","getImageInfoAsync","forEach","e"],"sources":["/Users/noname/WebstormProjects/webapplastdesire/node_modules/expo-asset/src/Asset.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport { AssetMetadata, selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\n// @docsMissing\nexport type AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport { AssetMetadata };\n\n// @needsAudit\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  /**\n   * @private\n   */\n  static byHash = {};\n  /**\n   * @private\n   */\n  static byUri = {};\n\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  name: string;\n  /**\n   * The extension of the asset filename.\n   */\n  type: string;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  hash: string | null = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer.\n   */\n  uri: string;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  localUri: string | null = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  width: number | null = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  height: number | null = null;\n  // @docsMissing\n  downloading: boolean = false;\n  // @docsMissing\n  downloaded: boolean = false;\n\n  /**\n   * @private\n   */\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map((moduleId) => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  // @docsMissing\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  // @docsMissing\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#assetlocaluri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise<void>((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}