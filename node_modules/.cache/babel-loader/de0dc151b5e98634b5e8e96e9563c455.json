{"ast":null,"code":"import * as React from 'react';\nimport { findNodeHandle, Image, StyleSheet, View } from 'react-native';\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport { ResizeMode } from './Video.types';\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\nclass Video extends React.Component {\n  _nativeRef = React.createRef();\n  _onPlaybackStatusUpdate = null;\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster\n    };\n  }\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n  // Internal methods\n  _handleNewStatus = status => {\n    if (this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n      this.setState({\n        showPoster: false\n      });\n    }\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n  _performOperationAndHandleStatusAsync = async operation => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n    const handle = findNodeHandle(this._nativeRef.current);\n    const status = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n  // Fullscreening API\n  _setFullscreen = async value => {\n    return this._performOperationAndHandleStatusAsync(tag => ExpoVideoViewManager.setFullscreen(tag, value));\n  };\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n  /**\n   * @hidden\n   */\n  getStatusAsync = async () => {\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.getStatusForVideo(tag));\n  };\n  /**\n   * @hidden\n   */\n  loadAsync = (() => {\n    var _this = this;\n    return async function (source) {\n      let initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const {\n        nativeSource,\n        fullInitialStatus\n      } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n      return _this._performOperationAndHandleStatusAsync(tag => ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus));\n    };\n  })();\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async () => {\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.unloadForVideo(tag));\n  };\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async status => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(tag => ExponentAV.setStatusForVideo(tag, status));\n  };\n  /**\n   * @hidden\n   */\n  replayAsync = (() => {\n    var _this2 = this;\n    return async function () {\n      let status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (status.positionMillis && status.positionMillis !== 0) {\n        throw new Error('Requested position after replay has to be 0.');\n      }\n      return _this2._performOperationAndHandleStatusAsync(tag => ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true\n      }));\n    };\n  })();\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync;\n  playFromPositionAsync;\n  pauseAsync;\n  stopAsync;\n  setPositionAsync;\n  setRateAsync;\n  setVolumeAsync;\n  setIsMutedAsync;\n  setIsLoopingAsync;\n  setProgressUpdateIntervalAsync;\n  // Callback wrappers\n  _nativeOnPlaybackStatusUpdate = event => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n  _nativeOnLoad = event => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n  _nativeOnError = event => {\n    const error = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n  _nativeOnReadyForDisplay = event => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n  _nativeOnFullscreenUpdate = event => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n  _renderPoster = () => this.props.usePoster && this.state.showPoster ? React.createElement(Image, {\n    style: [_STYLES.poster, this.props.posterStyle],\n    source: this.props.posterSource\n  }) : null;\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n    // Set status via individual props\n    const status = {\n      ...this.props.status\n    };\n    ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n    // Replace selected native props\n    const nativeProps = {\n      ...omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle', ...Object.keys(status)]),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate\n    };\n    return React.createElement(View, {\n      style: nativeProps.style,\n      pointerEvents: \"box-none\"\n    }, React.createElement(ExponentVideo, {\n      ref: this._nativeRef,\n      ...nativeProps,\n      style: _STYLES.video\n    }), this._renderPoster());\n  }\n}\nfunction omit(props, propNames) {\n  const copied = {\n    ...props\n  };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\nObject.assign(Video.prototype, PlaybackMixin);\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;","map":{"version":3,"mappings":"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","names":["React","findNodeHandle","Image","StyleSheet","View","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","_STYLES","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","Component","_nativeRef","createRef","_onPlaybackStatusUpdate","constructor","props","state","showPoster","usePoster","setNativeProps","nativeProps","nativeVideo","current","Error","_handleNewStatus","status","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","operation","handle","_setFullscreen","value","tag","setFullscreen","presentFullscreenPlayer","dismissFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","source","initialStatus","downloadFirst","nativeSource","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","componentWillUnmount","catch","setStatusAsync","setStatusForVideo","replayAsync","replayVideo","shouldPlay","setOnPlaybackStatusUpdate","playAsync","playFromPositionAsync","pauseAsync","stopAsync","setPositionAsync","setRateAsync","setVolumeAsync","setIsMutedAsync","setIsLoopingAsync","setProgressUpdateIntervalAsync","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","style","posterStyle","posterSource","render","undefined","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","Object","keys","flatten","onStatusUpdate","pointerEvents","ref","propNames","copied","propName","assign","prototype"],"sources":["/Users/noname/WebstormProjects/webapplastdesire/node_modules/expo-av/src/Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}