{"ast":null,"code":"import { NativeModules } from 'react-native';\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver from './AssetSourceResolver';\nlet _customSourceTransformer;\nlet _serverURL;\nlet _sourceCodeScriptURL;\nfunction getSourceCodeScriptURL() {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n  let sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n  if (!sourceCode) {\n    sourceCode = NativeModules?.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode?.scriptURL;\n  return _sourceCodeScriptURL;\n}\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n  const resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  }\n});\nexport const {\n  pickScale\n} = AssetSourceResolver;","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAE5C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAOC,mBAA4C,MAAM,uBAAuB;AAIhF,IAAIC,wBAAwB;AAC5B,IAAIC,UAAqC;AACzC,IAAIC,oBAA+C;AAEnD,SAASC,sBAAsB;EAC7B,IAAID,oBAAoB,EAAE;IACxB,OAAOA,oBAAoB;;EAG7B,IAAIE,UAAU,GAAG,OAAOC,gBAAgB,KAAK,WAAW,GAAGA,gBAAgB,CAACC,UAAU,GAAG,IAAI;EAC7F,IAAI,CAACF,UAAU,EAAE;IACfA,UAAU,GAAGP,aAAa,EAAES,UAAU;;EAExCJ,oBAAoB,GAAGE,UAAU,EAAEG,SAAS;EAC5C,OAAOL,oBAAoB;AAC7B;AAEA,SAASM,eAAe;EACtB,IAAIP,UAAU,KAAKQ,SAAS,EAAE;IAC5B,MAAMC,mBAAmB,GAAGP,sBAAsB,EAAE;IACpD,MAAMQ,KAAK,GAAGD,mBAAmB,IAAIA,mBAAmB,CAACC,KAAK,CAAC,mBAAmB,CAAC;IACnF,IAAIA,KAAK,EAAE;MACT;MACAV,UAAU,GAAGU,KAAK,CAAC,CAAC,CAAC;KACtB,MAAM;MACL;MACAV,UAAU,GAAG,IAAI;;;EAGrB,OAAOA,UAAU;AACnB;AAEA,OAAM,SAAUW,0BAA0B,CACxCC,WAAmE;EAEnEb,wBAAwB,GAAGa,WAAW;AACxC;AAEA;;;;AAIA,eAAc,SAAUC,kBAAkB,CAACC,MAAW;EACpD,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOA,MAAM;;EAGf,MAAMC,KAAK,GAAGlB,YAAY,CAACiB,MAAM,CAAC;EAClC,IAAI,CAACC,KAAK,EAAE;IACV,OAAOP,SAAS;;EAGlB,MAAMQ,QAAQ,GAAG,IAAIlB,mBAAmB,CAACS,eAAe,EAAE,EAAE,IAAI,EAAEQ,KAAK,CAAC;EACxE,IAAIhB,wBAAwB,EAAE;IAC5B,OAAOA,wBAAwB,CAACiB,QAAQ,CAAC;;EAE3C,OAAOA,QAAQ,CAACC,YAAY,EAAE;AAChC;AAEAC,MAAM,CAACC,cAAc,CAACN,kBAAkB,EAAE,4BAA4B,EAAE;EACtEO,GAAG;IACD,OAAOT,0BAA0B;EACnC;CACD,CAAC;AAEF,OAAO,MAAM;EAAEU;AAAS,CAAE,GAAGvB,mBAAmB","names":["NativeModules","getAssetByID","AssetSourceResolver","_customSourceTransformer","_serverURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","nativeExtensions","SourceCode","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sources":["/Users/noname/WebstormProjects/webapplastdesire/node_modules/expo-asset/src/resolveAssetSource.web.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare let nativeExtensions: { SourceCode?: { scriptURL: string } } | undefined;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n  if (!sourceCode) {\n    sourceCode = NativeModules?.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode?.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"]},"metadata":{},"sourceType":"module"}