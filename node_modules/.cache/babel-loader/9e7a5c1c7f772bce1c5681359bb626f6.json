{"ast":null,"code":"import { PermissionStatus, SyntheticPlatformEmitter } from 'expo-modules-core';\nimport { RecordingOptionsPresets } from './Audio/RecordingConstants';\nasync function getPermissionWithQueryAsync(name) {\n  if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n  try {\n    const {\n      state\n    } = await navigator.permissions.query({\n      name\n    });\n    switch (state) {\n      case 'granted':\n        return PermissionStatus.GRANTED;\n      case 'denied':\n        return PermissionStatus.DENIED;\n      default:\n        return PermissionStatus.UNDETERMINED;\n    }\n  } catch {\n    // Firefox - TypeError: 'microphone' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName.\n    return PermissionStatus.UNDETERMINED;\n  }\n}\nfunction getUserMedia(constraints) {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  // First get ahold of the legacy getUserMedia, if present\n  const getUserMedia =\n  // TODO: this method is deprecated, migrate to https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n  navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || function () {\n    const error = new Error('Permission unimplemented');\n    error.code = 0;\n    error.name = 'NotAllowedError';\n    throw error;\n  };\n  return new Promise((resolve, reject) => {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\nfunction getStatusFromMedia(media) {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined\n    };\n  }\n  const isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n  const status = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100,\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended\n  };\n  return status;\n}\nfunction setStatusForMedia(media, status) {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n  return getStatusFromMedia(media);\n}\nlet mediaRecorder = null;\nlet mediaRecorderUptimeOfLastStartResume = 0;\nlet mediaRecorderDurationAlreadyRecorded = 0;\nlet mediaRecorderIsRecording = false;\nfunction getAudioRecorderDurationMillis() {\n  let duration = mediaRecorderDurationAlreadyRecorded;\n  if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n    duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n  }\n  return duration;\n}\nexport default {\n  get name() {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element) {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(element, nativeSource, fullInitialStatus) {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element) {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(element, status) {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(element, status) {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(nativeSource, fullInitialStatus) {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media)\n      });\n    };\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error.message\n      });\n    };\n    const status = setStatusForMedia(media, fullInitialStatus);\n    return [media, status];\n  },\n  async unloadForSound(element) {\n    element.pause();\n    element.removeAttribute('src');\n    element.load();\n    return getStatusFromMedia(element);\n  },\n  async setStatusForSound(element, status) {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(element, status) {\n    return setStatusForMedia(element, status);\n  },\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus() {\n    return {\n      canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n      isRecording: mediaRecorder?.state === 'recording',\n      isDoneRecording: false,\n      durationMillis: getAudioRecorderDurationMillis(),\n      uri: null\n    };\n  },\n  async prepareAudioRecorder(options) {\n    if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n      throw new Error('No media devices available');\n    }\n    mediaRecorderUptimeOfLastStartResume = 0;\n    mediaRecorderDurationAlreadyRecorded = 0;\n    const stream = await getUserMedia({\n      audio: true\n    });\n    mediaRecorder = new window.MediaRecorder(stream, options?.web || RecordingOptionsPresets.HIGH_QUALITY.web);\n    mediaRecorder.addEventListener('pause', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n    });\n    mediaRecorder.addEventListener('resume', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderIsRecording = true;\n    });\n    mediaRecorder.addEventListener('start', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderDurationAlreadyRecorded = 0;\n      mediaRecorderIsRecording = true;\n    });\n    mediaRecorder.addEventListener('stop', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n      // Clears recording icon in Chrome tab\n      stream.getTracks().forEach(track => track.stop());\n    });\n    const {\n      uri,\n      ...status\n    } = await this.getAudioRecordingStatus();\n    return {\n      uri: null,\n      status\n    };\n  },\n  async startAudioRecording() {\n    if (mediaRecorder === null) {\n      throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n    }\n    if (mediaRecorder.state === 'paused') {\n      mediaRecorder.resume();\n    } else {\n      mediaRecorder.start();\n    }\n    return this.getAudioRecordingStatus();\n  },\n  async pauseAudioRecording() {\n    if (mediaRecorder === null) {\n      throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n    }\n    // Set status to paused\n    mediaRecorder.pause();\n    return this.getAudioRecordingStatus();\n  },\n  async stopAudioRecording() {\n    if (mediaRecorder === null) {\n      throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n    }\n    if (mediaRecorder.state === 'inactive') {\n      return this.getAudioRecordingStatus();\n    }\n    const dataPromise = new Promise(resolve => mediaRecorder.addEventListener('dataavailable', e => resolve(e.data)));\n    mediaRecorder.stop();\n    const data = await dataPromise;\n    const url = URL.createObjectURL(data);\n    return {\n      ...(await this.getAudioRecordingStatus()),\n      uri: url\n    };\n  },\n  async unloadAudioRecorder() {\n    mediaRecorder = null;\n  },\n  async getPermissionsAsync() {\n    const maybeStatus = await getPermissionWithQueryAsync('microphone');\n    switch (maybeStatus) {\n      case PermissionStatus.GRANTED:\n        return {\n          status: PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true\n        };\n      case PermissionStatus.DENIED:\n        return {\n          status: PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false\n        };\n      default:\n        return await this.requestPermissionsAsync();\n    }\n  },\n  async requestPermissionsAsync() {\n    try {\n      const stream = await getUserMedia({\n        audio: true\n      });\n      stream.getTracks().forEach(track => track.stop());\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: true\n      };\n    } catch {\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false\n      };\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["PermissionStatus","SyntheticPlatformEmitter","RecordingOptionsPresets","getPermissionWithQueryAsync","name","navigator","permissions","query","state","GRANTED","DENIED","UNDETERMINED","getUserMedia","constraints","mediaDevices","webkitGetUserMedia","mozGetUserMedia","error","Error","code","Promise","resolve","reject","call","getStatusFromMedia","media","isLoaded","undefined","isPlaying","currentTime","paused","ended","readyState","status","uri","src","progressUpdateIntervalMillis","durationMillis","duration","positionMillis","shouldPlay","autoplay","isBuffering","rate","playbackRate","shouldCorrectPitch","volume","isMuted","muted","isLooping","loop","didJustFinish","setStatusForMedia","play","pause","mediaRecorder","mediaRecorderUptimeOfLastStartResume","mediaRecorderDurationAlreadyRecorded","mediaRecorderIsRecording","getAudioRecorderDurationMillis","Date","now","getStatusForVideo","element","loadForVideo","nativeSource","fullInitialStatus","unloadForVideo","setStatusForVideo","replayVideo","setAudioMode","setAudioIsEnabled","getStatusForSound","loadForSound","source","Audio","ontimeupdate","emit","key","onerror","message","unloadForSound","removeAttribute","load","setStatusForSound","replaySound","getAudioRecordingStatus","canRecord","isRecording","isDoneRecording","prepareAudioRecorder","options","stream","audio","window","MediaRecorder","web","HIGH_QUALITY","addEventListener","getTracks","forEach","track","stop","startAudioRecording","resume","start","pauseAudioRecording","stopAudioRecording","dataPromise","e","data","url","URL","createObjectURL","unloadAudioRecorder","getPermissionsAsync","maybeStatus","expires","canAskAgain","granted","requestPermissionsAsync"],"sources":["/Users/noname/WebstormProjects/webapplastdesire/node_modules/expo-av/src/ExponentAV.web.ts"],"sourcesContent":["import { PermissionResponse, PermissionStatus, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport type { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV.types';\nimport type { RecordingStatus } from './Audio/Recording.types';\nimport { RecordingOptionsPresets } from './Audio/RecordingConstants';\n\nasync function getPermissionWithQueryAsync(\n  name: PermissionNameWithAdditionalValues\n): Promise<PermissionStatus | null> {\n  if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n\n  try {\n    const { state } = await navigator.permissions.query({ name });\n    switch (state) {\n      case 'granted':\n        return PermissionStatus.GRANTED;\n      case 'denied':\n        return PermissionStatus.DENIED;\n      default:\n        return PermissionStatus.UNDETERMINED;\n    }\n  } catch {\n    // Firefox - TypeError: 'microphone' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName.\n    return PermissionStatus.UNDETERMINED;\n  }\n}\n\nfunction getUserMedia(constraints: MediaStreamConstraints): Promise<MediaStream> {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n\n  // First get ahold of the legacy getUserMedia, if present\n  const getUserMedia =\n    // TODO: this method is deprecated, migrate to https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.getUserMedia ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    function () {\n      const error: any = new Error('Permission unimplemented');\n      error.code = 0;\n      error.name = 'NotAllowedError';\n      throw error;\n    };\n\n  return new Promise((resolve, reject) => {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): AVPlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: AVPlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nfunction setStatusForMedia(\n  media: HTMLMediaElement,\n  status: AVPlaybackStatusToSet\n): AVPlaybackStatus {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nlet mediaRecorder: null | any /*MediaRecorder*/ = null;\nlet mediaRecorderUptimeOfLastStartResume: number = 0;\nlet mediaRecorderDurationAlreadyRecorded: number = 0;\nlet mediaRecorderIsRecording: boolean = false;\n\nfunction getAudioRecorderDurationMillis() {\n  let duration = mediaRecorderDurationAlreadyRecorded;\n  if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n    duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n  }\n  return duration;\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: AVPlaybackNativeSource,\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element: HTMLMediaElement) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(\n    nativeSource: string | { uri: string; [key: string]: any },\n    fullInitialStatus: AVPlaybackStatusToSet\n  ): Promise<[HTMLMediaElement, AVPlaybackStatus]> {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media),\n      });\n    };\n\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error!.message,\n      });\n    };\n\n    const status = setStatusForMedia(media, fullInitialStatus);\n\n    return [media, status];\n  },\n  async unloadForSound(element: HTMLMediaElement) {\n    element.pause();\n    element.removeAttribute('src');\n    element.load();\n    return getStatusFromMedia(element);\n  },\n  async setStatusForSound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(\n    element: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n  ): Promise<AVPlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus(): Promise<RecordingStatus> {\n    return {\n      canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n      isRecording: mediaRecorder?.state === 'recording',\n      isDoneRecording: false,\n      durationMillis: getAudioRecorderDurationMillis(),\n      uri: null,\n    };\n  },\n  async prepareAudioRecorder(options): Promise<{\n    uri: string | null;\n    // status is of type RecordingStatus, but without the canRecord field populated\n    status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n  }> {\n    if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n      throw new Error('No media devices available');\n    }\n\n    mediaRecorderUptimeOfLastStartResume = 0;\n    mediaRecorderDurationAlreadyRecorded = 0;\n\n    const stream = await getUserMedia({ audio: true });\n\n    mediaRecorder = new (window as any).MediaRecorder(\n      stream,\n      options?.web || RecordingOptionsPresets.HIGH_QUALITY.web\n    );\n\n    mediaRecorder.addEventListener('pause', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n    });\n\n    mediaRecorder.addEventListener('resume', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderIsRecording = true;\n    });\n\n    mediaRecorder.addEventListener('start', () => {\n      mediaRecorderUptimeOfLastStartResume = Date.now();\n      mediaRecorderDurationAlreadyRecorded = 0;\n      mediaRecorderIsRecording = true;\n    });\n\n    mediaRecorder.addEventListener('stop', () => {\n      mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n      mediaRecorderIsRecording = false;\n\n      // Clears recording icon in Chrome tab\n      stream.getTracks().forEach((track) => track.stop());\n    });\n\n    const { uri, ...status } = await this.getAudioRecordingStatus();\n\n    return { uri: null, status };\n  },\n  async startAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    if (mediaRecorder.state === 'paused') {\n      mediaRecorder.resume();\n    } else {\n      mediaRecorder.start();\n    }\n\n    return this.getAudioRecordingStatus();\n  },\n  async pauseAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    // Set status to paused\n    mediaRecorder.pause();\n\n    return this.getAudioRecordingStatus();\n  },\n  async stopAudioRecording(): Promise<RecordingStatus> {\n    if (mediaRecorder === null) {\n      throw new Error(\n        'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n      );\n    }\n\n    if (mediaRecorder.state === 'inactive') {\n      return this.getAudioRecordingStatus();\n    }\n\n    const dataPromise = new Promise<Blob>((resolve) =>\n      mediaRecorder.addEventListener('dataavailable', (e) => resolve(e.data))\n    );\n\n    mediaRecorder.stop();\n\n    const data = await dataPromise;\n    const url = URL.createObjectURL(data);\n\n    return {\n      ...(await this.getAudioRecordingStatus()),\n      uri: url,\n    };\n  },\n  async unloadAudioRecorder(): Promise<void> {\n    mediaRecorder = null;\n  },\n\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    const maybeStatus = await getPermissionWithQueryAsync('microphone');\n    switch (maybeStatus) {\n      case PermissionStatus.GRANTED:\n        return {\n          status: PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true,\n        };\n      case PermissionStatus.DENIED:\n        return {\n          status: PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false,\n        };\n      default:\n        return await this.requestPermissionsAsync();\n    }\n  },\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    try {\n      const stream = await getUserMedia({ audio: true });\n      stream.getTracks().forEach((track) => track.stop());\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: true,\n      };\n    } catch {\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}