{"ast":null,"code":"/**\n * Detect if the browser supports the standard fullscreen API on the given\n * element:\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nconst supportsFullscreenAPI = element => 'requestFullscreen' in element;\n/**\n * Detect if the browser supports the non-standard webkit fullscreen API on the\n * given element (looking at you, Safari).\n */\nconst supportsWebkitFullscreenAPI = element => 'webkitEnterFullScreen' in element;\n/**\n * Detect if the browser supports the non-standard ms fullscreen API on the\n * given element (looking at you, IE11).\n */\nconst supportsMsFullscreenAPI = element => 'msRequestFullscreen' in element;\n/**\n * Detect if the browser supports the `webkitFullscreenChange` event. This is\n * a non-standard event added to Safari on macOS by Apple:\n * https://developer.apple.com/documentation/webkitjs/document/1631998-onwebkitfullscreenchange\n */\nconst supportsWebkitFullscreenChangeEvent = () => supportsEvent('video', 'webkitfullscreenchange');\n/**\n * A helper that adds an event listener to an element. The key value-add over\n * the native addEventListener is that it returns a function that will remove\n * the event listener. This allows the setup and teardown logic for a listener\n * to be easily colocated.\n */\nfunction addEventListener(element, eventName, listener) {\n  element.addEventListener(eventName, listener);\n  return () => element.removeEventListener(eventName, listener);\n}\n/**\n * Detect if the browser supports an event on a particular element type.\n */\nconst supportsEvent = (elementName, eventName) => {\n  // Detect if the browser supports the event by attempting to add a handler\n  // attribute for that event to the provided element. If the event is supported\n  // then the browser will accept the attribute and report the type of the\n  // attribute as \"function\". See: https://stackoverflow.com/a/4562426/2747759\n  const element = document.createElement(elementName);\n  element.setAttribute('on' + eventName, 'return;');\n  return typeof element['on' + eventName] === 'function';\n};\n/**\n * Switches a video element into fullscreen.\n */\nexport async function requestFullscreen(element) {\n  if (supportsFullscreenAPI(element)) {\n    return element.requestFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitEnterFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['msRequestFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n/**\n * Switches a video element out of fullscreen.\n */\nexport async function exitFullscreen(element) {\n  if (supportsFullscreenAPI(element)) {\n    return document.exitFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitExitFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    document['msExitFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n/**\n * Listens for fullscreen change events on a video element. The provided\n * callback will be called with `true` when the video is switched into\n * fullscreen and `false` when the video is switched out of fullscreen.\n */\nexport function addFullscreenListener(element, callback) {\n  if (supportsFullscreenAPI(element)) {\n    // Used by browsers that support the official spec\n    return addEventListener(element, 'fullscreenchange', event => callback(document.fullscreenElement === event.target));\n  } else if (supportsWebkitFullscreenAPI(element) && supportsWebkitFullscreenChangeEvent()) {\n    // Used by Safari on macOS\n    return addEventListener(element, 'webkitfullscreenchange', event => callback(document['webkitFullscreenElement'] === event.target));\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // Used by Safari on iOS\n    const removeBeginListener = addEventListener(element, 'webkitbeginfullscreen', () => callback(true));\n    const removeEndListener = addEventListener(element, 'webkitendfullscreen', () => callback(false));\n    return () => {\n      removeBeginListener();\n      removeEndListener();\n    };\n  } else if (supportsMsFullscreenAPI(element)) {\n    // Used by IE11\n    return addEventListener(document, 'MSFullscreenChange', event => callback(document['msFullscreenElement'] === event.target));\n  } else {\n    return () => {};\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;AAKA,MAAMA,qBAAqB,GAAIC,OAAyB,IACtD,mBAAmB,IAAIA,OAAO;AAEhC;;;;AAIA,MAAMC,2BAA2B,GAAID,OAAyB,IAC5D,uBAAuB,IAAIA,OAAO;AAEpC;;;;AAIA,MAAME,uBAAuB,GAAIF,OAAyB,IACxD,qBAAqB,IAAIA,OAAO;AAElC;;;;;AAKA,MAAMG,mCAAmC,GAAG,MAC1CC,aAAa,CAAC,OAAO,EAAE,wBAAwB,CAAC;AAElD;;;;;;AAMA,SAASC,gBAAgB,CACvBL,OAA+B,EAC/BM,SAAiB,EACjBC,QAA4C;EAE5CP,OAAO,CAACK,gBAAgB,CAACC,SAAS,EAAEC,QAAQ,CAAC;EAC7C,OAAO,MAAMP,OAAO,CAACQ,mBAAmB,CAACF,SAAS,EAAEC,QAAQ,CAAC;AAC/D;AAEA;;;AAGA,MAAMH,aAAa,GAAG,CAACK,WAAmB,EAAEH,SAAiB,KAAa;EACxE;EACA;EACA;EACA;EACA,MAAMN,OAAO,GAAGU,QAAQ,CAACC,aAAa,CAACF,WAAW,CAAC;EACnDT,OAAO,CAACY,YAAY,CAAC,IAAI,GAAGN,SAAS,EAAE,SAAS,CAAC;EACjD,OAAO,OAAON,OAAO,CAAC,IAAI,GAAGM,SAAS,CAAC,KAAK,UAAU;AACxD,CAAC;AAED;;;AAGA,OAAO,eAAeO,iBAAiB,CAACb,OAAyB;EAC/D,IAAID,qBAAqB,CAACC,OAAO,CAAC,EAAE;IAClC,OAAOA,OAAO,CAACa,iBAAiB,EAAE;GACnC,MAAM,IAAIZ,2BAA2B,CAACD,OAAO,CAAC,EAAE;IAC/C;IACAA,OAAO,CAAC,uBAAuB,CAAC,IAAI;GACrC,MAAM,IAAIE,uBAAuB,CAACF,OAAO,CAAC,EAAE;IAC3C;IACAA,OAAO,CAAC,qBAAqB,CAAC,IAAI;GACnC,MAAM;IACL,MAAM,IAAIc,KAAK,CAAC,0BAA0B,CAAC;;AAE/C;AAEA;;;AAIA,OAAO,eAAeC,cAAc,CAACf,OAAyB;EAC5D,IAAID,qBAAqB,CAACC,OAAO,CAAC,EAAE;IAClC,OAAOU,QAAQ,CAACK,cAAc,EAAE;GACjC,MAAM,IAAId,2BAA2B,CAACD,OAAO,CAAC,EAAE;IAC/C;IACAA,OAAO,CAAC,sBAAsB,CAAC,IAAI;GACpC,MAAM,IAAIE,uBAAuB,CAACF,OAAO,CAAC,EAAE;IAC3C;IACAU,QAAQ,CAAC,kBAAkB,CAAC,IAAI;GACjC,MAAM;IACL,MAAM,IAAII,KAAK,CAAC,0BAA0B,CAAC;;AAE/C;AAEA;;;;;AAKA,OAAM,SAAUE,qBAAqB,CACnChB,OAAyB,EACzBiB,QAAyC;EAEzC,IAAIlB,qBAAqB,CAACC,OAAO,CAAC,EAAE;IAClC;IACA,OAAOK,gBAAgB,CAACL,OAAO,EAAE,kBAAkB,EAAGkB,KAAK,IACzDD,QAAQ,CAACP,QAAQ,CAACS,iBAAiB,KAAKD,KAAK,CAACE,MAAM,CAAC,CACtD;GACF,MAAM,IAAInB,2BAA2B,CAACD,OAAO,CAAC,IAAIG,mCAAmC,EAAE,EAAE;IACxF;IACA,OAAOE,gBAAgB,CAACL,OAAO,EAAE,wBAAwB,EAAGkB,KAAK,IAC/DD,QAAQ,CAACP,QAAQ,CAAC,yBAAyB,CAAC,KAAKQ,KAAK,CAACE,MAAM,CAAC,CAC/D;GACF,MAAM,IAAInB,2BAA2B,CAACD,OAAO,CAAC,EAAE;IAC/C;IACA,MAAMqB,mBAAmB,GAAGhB,gBAAgB,CAACL,OAAO,EAAE,uBAAuB,EAAE,MAC7EiB,QAAQ,CAAC,IAAI,CAAC,CACf;IACD,MAAMK,iBAAiB,GAAGjB,gBAAgB,CAACL,OAAO,EAAE,qBAAqB,EAAE,MACzEiB,QAAQ,CAAC,KAAK,CAAC,CAChB;IACD,OAAO,MAAK;MACVI,mBAAmB,EAAE;MACrBC,iBAAiB,EAAE;IACrB,CAAC;GACF,MAAM,IAAIpB,uBAAuB,CAACF,OAAO,CAAC,EAAE;IAC3C;IACA,OAAOK,gBAAgB,CAACK,QAAQ,EAAE,oBAAoB,EAAGQ,KAAK,IAC5DD,QAAQ,CAACP,QAAQ,CAAC,qBAAqB,CAAC,KAAKQ,KAAK,CAACE,MAAM,CAAC,CAC3D;GACF,MAAM;IACL,OAAO,MAAK,CAAE,CAAC;;AAEnB","names":["supportsFullscreenAPI","element","supportsWebkitFullscreenAPI","supportsMsFullscreenAPI","supportsWebkitFullscreenChangeEvent","supportsEvent","addEventListener","eventName","listener","removeEventListener","elementName","document","createElement","setAttribute","requestFullscreen","Error","exitFullscreen","addFullscreenListener","callback","event","fullscreenElement","target","removeBeginListener","removeEndListener"],"sources":["/Users/noname/WebstormProjects/webapplastdesire/node_modules/expo-av/src/FullscreenUtils.web.ts"],"sourcesContent":["/**\n * Detect if the browser supports the standard fullscreen API on the given\n * element:\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nconst supportsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'requestFullscreen' in element;\n\n/**\n * Detect if the browser supports the non-standard webkit fullscreen API on the\n * given element (looking at you, Safari).\n */\nconst supportsWebkitFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'webkitEnterFullScreen' in element;\n\n/**\n * Detect if the browser supports the non-standard ms fullscreen API on the\n * given element (looking at you, IE11).\n */\nconst supportsMsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'msRequestFullscreen' in element;\n\n/**\n * Detect if the browser supports the `webkitFullscreenChange` event. This is\n * a non-standard event added to Safari on macOS by Apple:\n * https://developer.apple.com/documentation/webkitjs/document/1631998-onwebkitfullscreenchange\n */\nconst supportsWebkitFullscreenChangeEvent = (): boolean =>\n  supportsEvent('video', 'webkitfullscreenchange');\n\n/**\n * A helper that adds an event listener to an element. The key value-add over\n * the native addEventListener is that it returns a function that will remove\n * the event listener. This allows the setup and teardown logic for a listener\n * to be easily colocated.\n */\nfunction addEventListener(\n  element: Document | HTMLElement,\n  eventName: string,\n  listener: EventListenerOrEventListenerObject\n): () => any {\n  element.addEventListener(eventName, listener);\n  return () => element.removeEventListener(eventName, listener);\n}\n\n/**\n * Detect if the browser supports an event on a particular element type.\n */\nconst supportsEvent = (elementName: string, eventName: string): boolean => {\n  // Detect if the browser supports the event by attempting to add a handler\n  // attribute for that event to the provided element. If the event is supported\n  // then the browser will accept the attribute and report the type of the\n  // attribute as \"function\". See: https://stackoverflow.com/a/4562426/2747759\n  const element = document.createElement(elementName);\n  element.setAttribute('on' + eventName, 'return;');\n  return typeof element['on' + eventName] === 'function';\n};\n\n/**\n * Switches a video element into fullscreen.\n */\nexport async function requestFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return element.requestFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitEnterFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['msRequestFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Switches a video element out of fullscreen.\n */\n\nexport async function exitFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return document.exitFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitExitFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    document['msExitFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Listens for fullscreen change events on a video element. The provided\n * callback will be called with `true` when the video is switched into\n * fullscreen and `false` when the video is switched out of fullscreen.\n */\nexport function addFullscreenListener(\n  element: HTMLVideoElement,\n  callback: (isFullscreen: boolean) => void\n): () => any {\n  if (supportsFullscreenAPI(element)) {\n    // Used by browsers that support the official spec\n    return addEventListener(element, 'fullscreenchange', (event) =>\n      callback(document.fullscreenElement === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element) && supportsWebkitFullscreenChangeEvent()) {\n    // Used by Safari on macOS\n    return addEventListener(element, 'webkitfullscreenchange', (event) =>\n      callback(document['webkitFullscreenElement'] === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // Used by Safari on iOS\n    const removeBeginListener = addEventListener(element, 'webkitbeginfullscreen', () =>\n      callback(true)\n    );\n    const removeEndListener = addEventListener(element, 'webkitendfullscreen', () =>\n      callback(false)\n    );\n    return () => {\n      removeBeginListener();\n      removeEndListener();\n    };\n  } else if (supportsMsFullscreenAPI(element)) {\n    // Used by IE11\n    return addEventListener(document, 'MSFullscreenChange', (event) =>\n      callback(document['msFullscreenElement'] === event.target)\n    );\n  } else {\n    return () => {};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}